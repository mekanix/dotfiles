snippet react "Basic React class"
import React from 'react'
import PropTypes from 'prop-types'

import styles from './styles'


class $1 extends React.Component {
  render() {
    return (
	    $0
    )
  }
}


$1.propTypes = {
}


export default $1
endsnippet


snippet freenit "Basic Freenit class"
import React from 'react'
import PropTypes from 'prop-types'
import {
  // Paper,
} from '@material-ui/core'

import Template from 'templates/default/detail'
import styles from './styles'


class $1 extends React.Component {
  render() {
    return (
      <Template>
	      $0
      </Template>
    )
  }
}


$1.propTypes = {
}


export default withStore($1)
endsnippet


snippet store "Freenit based store class"
export default class $1Store {
  constructor(detail, list) {
    this.detail = detail[0]
    this.setDetail = detail[1]
    this.list = list[0]
    this.setList = list[1]
  }

  fetchAll = async () => {
    try {
      const response = await window.rest.get('/$2s')
      const result = {
        ...response.data,
        ok: true
      }
      this.setList(result)
      return result
    } catch (error) {
      return {
        ...error,
        ok: false,
      }
    }
  }

  fetch = async (id) => {
    try {
      const response = await window.rest.get(\`/$2s/${id}\`)
      const result = {
        ...response.data,
        ok: true
      }
      this.setDetail(result)
      return result
    } catch (error) {
      return {
        ...error,
        ok: false,
      }
    }
  }

  edit = async (id, data) => {
    try {
      const response = await window.rest.patch(\`/$2s/${id}\`, data)
      const result = {
        ...response.data,
        ok: true
      }
      this.setDetail(result)
      return result
    } catch (error) {
      return {
        ...error,
        ok: false,
      }
    }
  }

  create = async (data) => {
    try {
      const response = await window.rest.post('/$2s', data)
      const result = {
        ...response.data,
        ok: true
      }
      this.setDetail(result)
      return result
    } catch (error) {
      return {
        ...error,
        ok: false,
      }
    }
  }

  remove = async (id) => {
    try {
      const response = await window.rest.delete(\`/$2s/${id}\`)
      const result = {
        ...response.data,
        ok: true
      }
      this.setDetail(result)
      return result
    } catch (error) {
      return {
        ...error,
        ok: false,
      }
    }
  }
}
endsnippet
