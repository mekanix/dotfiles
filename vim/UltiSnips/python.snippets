snippet freenit "Five basic methods"
from typing import List

import ormar
from fastapi import HTTPException

from freenit.api.router import route

from ..models.$1 import ${1/\w+\s*/\u$0/}, ${1/\w+\s*/\u$0/}Optional


@route('/$1s', tags=['$1'], many=True)
class ${1/\w+\s*/\u$0/}ListAPI():
    @staticmethod
    async def get() -> List[${1/\w+\s*/\u$0/}]:
        return await ${1/\w+\s*/\u$0/}.objects.all()

    @staticmethod
    async def post($1: ${1/\w+\s*/\u$0/}) -> ${1/\w+\s*/\u$0/}:
        await $1.save()
        return $1


@route('/$1s/{id}', tags=['$1'])
class ${1/\w+\s*/\u$0/}DetailAPI():
    @staticmethod
    async def get(id: int) -> ${1/\w+\s*/\u$0/}:
        try:
            $1 = await ${1/\w+\s*/\u$0/}.objects.get(pk=id)
        except ormar.exceptions.NoMatch:
            raise HTTPException(status_code=404, detail="No such $1")
        return $1

    @staticmethod
    async def patch(id: int, $1_data: ${1/\w+\s*/\u$0/}Optional) -> ${1/\w+\s*/\u$0/}:
        try:
            $1 = await ${1/\w+\s*/\u$0/}.objects.get(pk=id)
            await $1.patch($1_data)
        except ormar.exceptions.NoMatch:
            raise HTTPException(status_code=404, detail="No such $1")
        return $1

    @staticmethod
    async def delete(id: str) -> ${1/\w+\s*/\u$0/}:
        try:
            $1 = await ${1/\w+\s*/\u$0/}.objects.get(pk=id)
        except ormar.exceptions.NoMatch:
            raise HTTPException(status_code=404, detail="No such $1")
        await $1.delete()
        return $1
endsnippet


snippet model "Basic DB model"
import ormar

from freenit.config import getConfig
from freenit.models.base import BaseModel
from freenit.models.metaclass import AllOptional

config = getConfig()


class $1(BaseModel):
    class Meta(config.meta):
        pass

    id: int = ormar.Integer(primary_key=True)
    $0


class $1Optional($1, metaclass=AllOptional):
    pass
endsnippet


snippet debug "Add break point"
import pdb
pdb.set_trace()
endsnippet
