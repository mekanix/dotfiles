snippet freenit "Five basic methods"
import ormar
from ..route import route
from ..models.$1 import ${1/\w+\s*/\u$0/}


@route('/$1s', tags=['$1'])
class ${1/\w+\s*/\u$0/}ListAPI():
    @staticmethod
    async def get() -> ormar.List[ormar.Optional[${1/\w+\s*/\u$0/}]]:
        return await ${1/\w+\s*/\u$0/}.objects.all()

    @staticmethod
    async def post($1: ${1/\w+\s*/\u$0/}) -> ${1/\w+\s*/\u$0/}:
        await $1.save()
        return $1


@route('/$1s/{id}', tags=['$1'])
class ${1/\w+\s*/\u$0/}DetailAPI():
    @staticmethod
    async def get(id: int) -> ${1/\w+\s*/\u$0/}:
        $1 = await ${1/\w+\s*/\u$0/}.objects.get(pk=id)
        return $1

    @staticmethod
    async def patch(id: int, $1_data: ${1/\w+\s*/\u$0/}) -> ${1/\w+\s*/\u$0/}:
        $1 = await ${1/\w+\s*/\u$0/}.objects.get(pk=id)
        $1.update($1_data)
        await $1.save()
        return $1

    @staticmethod
    async def delete(id: str) -> ${1/\w+\s*/\u$0/}:
        $1 = ${1/\w+\s*/\u$0/}.get(id=id)
        await $1.delete()
        return $1
endsnippet


snippet model "Basic DB model"
import ormar
from ..config import getConfig

config = getConfig()


class $1(ormar.Model):
    class Meta(config.meta):
        pass

    id: int = ormar.Integer(primary_key=True)

    $0
endsnippet


snippet debug "Add break point"
import pdb
pdb.set_trace()
endsnippet
