snippet react "Basic React class"
import React from 'react'
import PropTypes from 'prop-types'

import styles from './styles'

class $1 extends React.Component {
  render() {
    return (
	    $0
    )
  }
}

export default $1
endsnippet


snippet freenit "Basic Freenit class"
import React from 'react'
import { observer } from 'mobx-react'
import PropTypes from 'prop-types'
import {
  // Paper,
} from '@material-ui/core'

import Template from 'templates/default/detail'
import store from 'store'
import styles from './styles'


class $1 extends React.Component {
  render() {
    return (
      <Template>
	      $0
      </Template>
    )
  }
}

export default observer($1)
endsnippet


snippet store "Freenit based store class"
import { makeAutoObservable, runInAction } from 'mobx'

class ${1/\w+\s*/\u$0/}Store {
  detail = {
    id: 0,
  }
  list = {
    data: [],
    page: 0,
    total: 0,
  }

  constructor() {
    makeAutoObservable(this)
  }

  fetch = auth.protect(async (id) => {
    try {
      const response = await window.rest.get(\`/$1s/${id}\`)
      runInAction(() => {
        this.detail = { ...response.data, ok: true }
      })
      return this.detail
    } catch (error) {
      return { ...error, ok: false }
    }
  })

  fetchAll = auth.protect(async (Page = 0, PerPage = 10) => {
    try {
      const response = await window.rest.get('/$1s', { 
        headers: { Page, PerPage } 
      })
      runInAction(() => {
        this.list = { ...response.data, ok: true }
      })
      return this.list
    } catch (error) {
      return { ...error, ok: false }
    }
  })

  create = async (data) => {
    try {
      const response = await window.rest.post('/$1s', data)
      runInAction(() => {
        this.list = { ...response.data, ok: true }
      })
      return this.list
    } catch (error) {
      return { ...error, ok: false }
    }
  }

  edit = async (id, data) => {
    try {
      const response = await window.rest.patch(\`/$1s/${id}\`, data)
      const result = { ...response.data, ok: true }
      if (this.detail.id === id) {
        runInAction(() => {
          this.detail = result
        })
      }
      return this.list
    } catch (error) {
      return { ...error, ok: false }
    }
  }

  destroy = async (id) => {
    try {
      const response = await window.rest.delete(\`/$1s/${id}\`)
      const result = { ...response.data, ok: true }
      runInAction(() => {
        this.detail = result
        this.list = this.list.filter(entity => entity.id !== id)
      })
      return result
    } catch (error) {
      return { ...error, ok: false }
    }
  }
}

const $1 = new ${1/\w+\s*/\u$0/}Store()
export default $1
endsnippet


snippet fetch "Freenit async function to fetch from store"
${1:const fetch} = async (${2:id}) => {
  const { ${3:item}, notification } = store
  const response = await $3.${4:get}(${5:$2})
  if (!response.ok) {
    const error = errors(response)
    notification.show(\`Error executing ${1/.*?\s+(\S+)$/$1/}: ${error.message}\`)
  }
}
endsnippet
